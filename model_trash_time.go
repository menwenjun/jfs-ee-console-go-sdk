/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TrashTime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrashTime{}

// TrashTime struct for TrashTime
type TrashTime struct {
	Trashtime *int64 `json:"trashtime,omitempty"`
}

// NewTrashTime instantiates a new TrashTime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrashTime() *TrashTime {
	this := TrashTime{}
	return &this
}

// NewTrashTimeWithDefaults instantiates a new TrashTime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrashTimeWithDefaults() *TrashTime {
	this := TrashTime{}
	return &this
}

// GetTrashtime returns the Trashtime field value if set, zero value otherwise.
func (o *TrashTime) GetTrashtime() int64 {
	if o == nil || IsNil(o.Trashtime) {
		var ret int64
		return ret
	}
	return *o.Trashtime
}

// GetTrashtimeOk returns a tuple with the Trashtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrashTime) GetTrashtimeOk() (*int64, bool) {
	if o == nil || IsNil(o.Trashtime) {
		return nil, false
	}
	return o.Trashtime, true
}

// HasTrashtime returns a boolean if a field has been set.
func (o *TrashTime) HasTrashtime() bool {
	if o != nil && !IsNil(o.Trashtime) {
		return true
	}

	return false
}

// SetTrashtime gets a reference to the given int64 and assigns it to the Trashtime field.
func (o *TrashTime) SetTrashtime(v int64) {
	o.Trashtime = &v
}

func (o TrashTime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrashTime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Trashtime) {
		toSerialize["trashtime"] = o.Trashtime
	}
	return toSerialize, nil
}

type NullableTrashTime struct {
	value *TrashTime
	isSet bool
}

func (v NullableTrashTime) Get() *TrashTime {
	return v.value
}

func (v *NullableTrashTime) Set(val *TrashTime) {
	v.value = val
	v.isSet = true
}

func (v NullableTrashTime) IsSet() bool {
	return v.isSet
}

func (v *NullableTrashTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrashTime(val *TrashTime) *NullableTrashTime {
	return &NullableTrashTime{value: val, isSet: true}
}

func (v NullableTrashTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrashTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


