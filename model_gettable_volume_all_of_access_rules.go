/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GettableVolumeAllOfAccessRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GettableVolumeAllOfAccessRules{}

// GettableVolumeAllOfAccessRules struct for GettableVolumeAllOfAccessRules
type GettableVolumeAllOfAccessRules struct {
	Iprange *string `json:"iprange,omitempty"`
	Token *string `json:"token,omitempty"`
	Readonly *bool `json:"readonly,omitempty"`
	Appendonly *bool `json:"appendonly,omitempty"`
}

// NewGettableVolumeAllOfAccessRules instantiates a new GettableVolumeAllOfAccessRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGettableVolumeAllOfAccessRules() *GettableVolumeAllOfAccessRules {
	this := GettableVolumeAllOfAccessRules{}
	return &this
}

// NewGettableVolumeAllOfAccessRulesWithDefaults instantiates a new GettableVolumeAllOfAccessRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGettableVolumeAllOfAccessRulesWithDefaults() *GettableVolumeAllOfAccessRules {
	this := GettableVolumeAllOfAccessRules{}
	return &this
}

// GetIprange returns the Iprange field value if set, zero value otherwise.
func (o *GettableVolumeAllOfAccessRules) GetIprange() string {
	if o == nil || IsNil(o.Iprange) {
		var ret string
		return ret
	}
	return *o.Iprange
}

// GetIprangeOk returns a tuple with the Iprange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableVolumeAllOfAccessRules) GetIprangeOk() (*string, bool) {
	if o == nil || IsNil(o.Iprange) {
		return nil, false
	}
	return o.Iprange, true
}

// HasIprange returns a boolean if a field has been set.
func (o *GettableVolumeAllOfAccessRules) HasIprange() bool {
	if o != nil && !IsNil(o.Iprange) {
		return true
	}

	return false
}

// SetIprange gets a reference to the given string and assigns it to the Iprange field.
func (o *GettableVolumeAllOfAccessRules) SetIprange(v string) {
	o.Iprange = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *GettableVolumeAllOfAccessRules) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableVolumeAllOfAccessRules) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *GettableVolumeAllOfAccessRules) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *GettableVolumeAllOfAccessRules) SetToken(v string) {
	o.Token = &v
}

// GetReadonly returns the Readonly field value if set, zero value otherwise.
func (o *GettableVolumeAllOfAccessRules) GetReadonly() bool {
	if o == nil || IsNil(o.Readonly) {
		var ret bool
		return ret
	}
	return *o.Readonly
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableVolumeAllOfAccessRules) GetReadonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Readonly) {
		return nil, false
	}
	return o.Readonly, true
}

// HasReadonly returns a boolean if a field has been set.
func (o *GettableVolumeAllOfAccessRules) HasReadonly() bool {
	if o != nil && !IsNil(o.Readonly) {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given bool and assigns it to the Readonly field.
func (o *GettableVolumeAllOfAccessRules) SetReadonly(v bool) {
	o.Readonly = &v
}

// GetAppendonly returns the Appendonly field value if set, zero value otherwise.
func (o *GettableVolumeAllOfAccessRules) GetAppendonly() bool {
	if o == nil || IsNil(o.Appendonly) {
		var ret bool
		return ret
	}
	return *o.Appendonly
}

// GetAppendonlyOk returns a tuple with the Appendonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableVolumeAllOfAccessRules) GetAppendonlyOk() (*bool, bool) {
	if o == nil || IsNil(o.Appendonly) {
		return nil, false
	}
	return o.Appendonly, true
}

// HasAppendonly returns a boolean if a field has been set.
func (o *GettableVolumeAllOfAccessRules) HasAppendonly() bool {
	if o != nil && !IsNil(o.Appendonly) {
		return true
	}

	return false
}

// SetAppendonly gets a reference to the given bool and assigns it to the Appendonly field.
func (o *GettableVolumeAllOfAccessRules) SetAppendonly(v bool) {
	o.Appendonly = &v
}

func (o GettableVolumeAllOfAccessRules) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GettableVolumeAllOfAccessRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Iprange) {
		toSerialize["iprange"] = o.Iprange
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Readonly) {
		toSerialize["readonly"] = o.Readonly
	}
	if !IsNil(o.Appendonly) {
		toSerialize["appendonly"] = o.Appendonly
	}
	return toSerialize, nil
}

type NullableGettableVolumeAllOfAccessRules struct {
	value *GettableVolumeAllOfAccessRules
	isSet bool
}

func (v NullableGettableVolumeAllOfAccessRules) Get() *GettableVolumeAllOfAccessRules {
	return v.value
}

func (v *NullableGettableVolumeAllOfAccessRules) Set(val *GettableVolumeAllOfAccessRules) {
	v.value = val
	v.isSet = true
}

func (v NullableGettableVolumeAllOfAccessRules) IsSet() bool {
	return v.isSet
}

func (v *NullableGettableVolumeAllOfAccessRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGettableVolumeAllOfAccessRules(val *GettableVolumeAllOfAccessRules) *NullableGettableVolumeAllOfAccessRules {
	return &NullableGettableVolumeAllOfAccessRules{value: val, isSet: true}
}

func (v NullableGettableVolumeAllOfAccessRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGettableVolumeAllOfAccessRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


