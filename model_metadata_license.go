/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MetadataLicense type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataLicense{}

// MetadataLicense struct for MetadataLicense
type MetadataLicense struct {
	Dns *string `json:"dns,omitempty"`
	ExpiredAt *time.Time `json:"expired_at,omitempty"`
	SizeCap *int32 `json:"size_cap,omitempty"`
	License *string `json:"license,omitempty"`
}

// NewMetadataLicense instantiates a new MetadataLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataLicense() *MetadataLicense {
	this := MetadataLicense{}
	return &this
}

// NewMetadataLicenseWithDefaults instantiates a new MetadataLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataLicenseWithDefaults() *MetadataLicense {
	this := MetadataLicense{}
	return &this
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *MetadataLicense) GetDns() string {
	if o == nil || IsNil(o.Dns) {
		var ret string
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataLicense) GetDnsOk() (*string, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *MetadataLicense) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given string and assigns it to the Dns field.
func (o *MetadataLicense) SetDns(v string) {
	o.Dns = &v
}

// GetExpiredAt returns the ExpiredAt field value if set, zero value otherwise.
func (o *MetadataLicense) GetExpiredAt() time.Time {
	if o == nil || IsNil(o.ExpiredAt) {
		var ret time.Time
		return ret
	}
	return *o.ExpiredAt
}

// GetExpiredAtOk returns a tuple with the ExpiredAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataLicense) GetExpiredAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpiredAt) {
		return nil, false
	}
	return o.ExpiredAt, true
}

// HasExpiredAt returns a boolean if a field has been set.
func (o *MetadataLicense) HasExpiredAt() bool {
	if o != nil && !IsNil(o.ExpiredAt) {
		return true
	}

	return false
}

// SetExpiredAt gets a reference to the given time.Time and assigns it to the ExpiredAt field.
func (o *MetadataLicense) SetExpiredAt(v time.Time) {
	o.ExpiredAt = &v
}

// GetSizeCap returns the SizeCap field value if set, zero value otherwise.
func (o *MetadataLicense) GetSizeCap() int32 {
	if o == nil || IsNil(o.SizeCap) {
		var ret int32
		return ret
	}
	return *o.SizeCap
}

// GetSizeCapOk returns a tuple with the SizeCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataLicense) GetSizeCapOk() (*int32, bool) {
	if o == nil || IsNil(o.SizeCap) {
		return nil, false
	}
	return o.SizeCap, true
}

// HasSizeCap returns a boolean if a field has been set.
func (o *MetadataLicense) HasSizeCap() bool {
	if o != nil && !IsNil(o.SizeCap) {
		return true
	}

	return false
}

// SetSizeCap gets a reference to the given int32 and assigns it to the SizeCap field.
func (o *MetadataLicense) SetSizeCap(v int32) {
	o.SizeCap = &v
}

// GetLicense returns the License field value if set, zero value otherwise.
func (o *MetadataLicense) GetLicense() string {
	if o == nil || IsNil(o.License) {
		var ret string
		return ret
	}
	return *o.License
}

// GetLicenseOk returns a tuple with the License field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataLicense) GetLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.License) {
		return nil, false
	}
	return o.License, true
}

// HasLicense returns a boolean if a field has been set.
func (o *MetadataLicense) HasLicense() bool {
	if o != nil && !IsNil(o.License) {
		return true
	}

	return false
}

// SetLicense gets a reference to the given string and assigns it to the License field.
func (o *MetadataLicense) SetLicense(v string) {
	o.License = &v
}

func (o MetadataLicense) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataLicense) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dns) {
		toSerialize["dns"] = o.Dns
	}
	if !IsNil(o.ExpiredAt) {
		toSerialize["expired_at"] = o.ExpiredAt
	}
	if !IsNil(o.SizeCap) {
		toSerialize["size_cap"] = o.SizeCap
	}
	if !IsNil(o.License) {
		toSerialize["license"] = o.License
	}
	return toSerialize, nil
}

type NullableMetadataLicense struct {
	value *MetadataLicense
	isSet bool
}

func (v NullableMetadataLicense) Get() *MetadataLicense {
	return v.value
}

func (v *NullableMetadataLicense) Set(val *MetadataLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataLicense(val *MetadataLicense) *NullableMetadataLicense {
	return &NullableMetadataLicense{value: val, isSet: true}
}

func (v NullableMetadataLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


