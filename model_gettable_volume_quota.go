/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the GettableVolumeQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GettableVolumeQuota{}

// GettableVolumeQuota struct for GettableVolumeQuota
type GettableVolumeQuota struct {
	Id int32 `json:"id"`
	Path string `json:"path"`
	Inodes int32 `json:"inodes"`
	Size int64 `json:"size"`
	UsedInodes *int32 `json:"used_inodes,omitempty"`
	UsedSize *int64 `json:"used_size,omitempty"`
	Created *time.Time `json:"created,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

type _GettableVolumeQuota GettableVolumeQuota

// NewGettableVolumeQuota instantiates a new GettableVolumeQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGettableVolumeQuota(id int32, path string, inodes int32, size int64) *GettableVolumeQuota {
	this := GettableVolumeQuota{}
	this.Id = id
	this.Path = path
	this.Inodes = inodes
	this.Size = size
	return &this
}

// NewGettableVolumeQuotaWithDefaults instantiates a new GettableVolumeQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGettableVolumeQuotaWithDefaults() *GettableVolumeQuota {
	this := GettableVolumeQuota{}
	return &this
}

// GetId returns the Id field value
func (o *GettableVolumeQuota) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *GettableVolumeQuota) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *GettableVolumeQuota) SetId(v int32) {
	o.Id = v
}

// GetPath returns the Path field value
func (o *GettableVolumeQuota) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *GettableVolumeQuota) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *GettableVolumeQuota) SetPath(v string) {
	o.Path = v
}

// GetInodes returns the Inodes field value
func (o *GettableVolumeQuota) GetInodes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Inodes
}

// GetInodesOk returns a tuple with the Inodes field value
// and a boolean to check if the value has been set.
func (o *GettableVolumeQuota) GetInodesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inodes, true
}

// SetInodes sets field value
func (o *GettableVolumeQuota) SetInodes(v int32) {
	o.Inodes = v
}

// GetSize returns the Size field value
func (o *GettableVolumeQuota) GetSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *GettableVolumeQuota) GetSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *GettableVolumeQuota) SetSize(v int64) {
	o.Size = v
}

// GetUsedInodes returns the UsedInodes field value if set, zero value otherwise.
func (o *GettableVolumeQuota) GetUsedInodes() int32 {
	if o == nil || IsNil(o.UsedInodes) {
		var ret int32
		return ret
	}
	return *o.UsedInodes
}

// GetUsedInodesOk returns a tuple with the UsedInodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableVolumeQuota) GetUsedInodesOk() (*int32, bool) {
	if o == nil || IsNil(o.UsedInodes) {
		return nil, false
	}
	return o.UsedInodes, true
}

// HasUsedInodes returns a boolean if a field has been set.
func (o *GettableVolumeQuota) HasUsedInodes() bool {
	if o != nil && !IsNil(o.UsedInodes) {
		return true
	}

	return false
}

// SetUsedInodes gets a reference to the given int32 and assigns it to the UsedInodes field.
func (o *GettableVolumeQuota) SetUsedInodes(v int32) {
	o.UsedInodes = &v
}

// GetUsedSize returns the UsedSize field value if set, zero value otherwise.
func (o *GettableVolumeQuota) GetUsedSize() int64 {
	if o == nil || IsNil(o.UsedSize) {
		var ret int64
		return ret
	}
	return *o.UsedSize
}

// GetUsedSizeOk returns a tuple with the UsedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableVolumeQuota) GetUsedSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.UsedSize) {
		return nil, false
	}
	return o.UsedSize, true
}

// HasUsedSize returns a boolean if a field has been set.
func (o *GettableVolumeQuota) HasUsedSize() bool {
	if o != nil && !IsNil(o.UsedSize) {
		return true
	}

	return false
}

// SetUsedSize gets a reference to the given int64 and assigns it to the UsedSize field.
func (o *GettableVolumeQuota) SetUsedSize(v int64) {
	o.UsedSize = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *GettableVolumeQuota) GetCreated() time.Time {
	if o == nil || IsNil(o.Created) {
		var ret time.Time
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableVolumeQuota) GetCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *GettableVolumeQuota) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given time.Time and assigns it to the Created field.
func (o *GettableVolumeQuota) SetCreated(v time.Time) {
	o.Created = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *GettableVolumeQuota) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GettableVolumeQuota) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *GettableVolumeQuota) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *GettableVolumeQuota) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o GettableVolumeQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GettableVolumeQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["path"] = o.Path
	toSerialize["inodes"] = o.Inodes
	toSerialize["size"] = o.Size
	if !IsNil(o.UsedInodes) {
		toSerialize["used_inodes"] = o.UsedInodes
	}
	if !IsNil(o.UsedSize) {
		toSerialize["used_size"] = o.UsedSize
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

func (o *GettableVolumeQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"path",
		"inodes",
		"size",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGettableVolumeQuota := _GettableVolumeQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGettableVolumeQuota)

	if err != nil {
		return err
	}

	*o = GettableVolumeQuota(varGettableVolumeQuota)

	return err
}

type NullableGettableVolumeQuota struct {
	value *GettableVolumeQuota
	isSet bool
}

func (v NullableGettableVolumeQuota) Get() *GettableVolumeQuota {
	return v.value
}

func (v *NullableGettableVolumeQuota) Set(val *GettableVolumeQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableGettableVolumeQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableGettableVolumeQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGettableVolumeQuota(val *GettableVolumeQuota) *NullableGettableVolumeQuota {
	return &NullableGettableVolumeQuota{value: val, isSet: true}
}

func (v NullableGettableVolumeQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGettableVolumeQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


