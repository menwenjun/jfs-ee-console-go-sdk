/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Metadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metadata{}

// Metadata struct for Metadata
type Metadata struct {
	Id *int32 `json:"id,omitempty"`
	Dns *string `json:"dns,omitempty"`
	Port *int32 `json:"port,omitempty"`
	Region *int32 `json:"region,omitempty"`
	Parent NullableInt32 `json:"parent,omitempty"`
	Zoneid *int32 `json:"zoneid,omitempty"`
	SizeCap *int64 `json:"sizeCap,omitempty"`
	ExpireAt NullableTime `json:"expireAt,omitempty"`
	InstanceSet []int32 `json:"instance_set,omitempty"`
}

// NewMetadata instantiates a new Metadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadata() *Metadata {
	this := Metadata{}
	return &this
}

// NewMetadataWithDefaults instantiates a new Metadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataWithDefaults() *Metadata {
	this := Metadata{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Metadata) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Metadata) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Metadata) SetId(v int32) {
	o.Id = &v
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *Metadata) GetDns() string {
	if o == nil || IsNil(o.Dns) {
		var ret string
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetDnsOk() (*string, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *Metadata) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given string and assigns it to the Dns field.
func (o *Metadata) SetDns(v string) {
	o.Dns = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *Metadata) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *Metadata) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *Metadata) SetPort(v int32) {
	o.Port = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Metadata) GetRegion() int32 {
	if o == nil || IsNil(o.Region) {
		var ret int32
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetRegionOk() (*int32, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Metadata) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given int32 and assigns it to the Region field.
func (o *Metadata) SetRegion(v int32) {
	o.Region = &v
}

// GetParent returns the Parent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Metadata) GetParent() int32 {
	if o == nil || IsNil(o.Parent.Get()) {
		var ret int32
		return ret
	}
	return *o.Parent.Get()
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Metadata) GetParentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Parent.Get(), o.Parent.IsSet()
}

// HasParent returns a boolean if a field has been set.
func (o *Metadata) HasParent() bool {
	if o != nil && o.Parent.IsSet() {
		return true
	}

	return false
}

// SetParent gets a reference to the given NullableInt32 and assigns it to the Parent field.
func (o *Metadata) SetParent(v int32) {
	o.Parent.Set(&v)
}
// SetParentNil sets the value for Parent to be an explicit nil
func (o *Metadata) SetParentNil() {
	o.Parent.Set(nil)
}

// UnsetParent ensures that no value is present for Parent, not even an explicit nil
func (o *Metadata) UnsetParent() {
	o.Parent.Unset()
}

// GetZoneid returns the Zoneid field value if set, zero value otherwise.
func (o *Metadata) GetZoneid() int32 {
	if o == nil || IsNil(o.Zoneid) {
		var ret int32
		return ret
	}
	return *o.Zoneid
}

// GetZoneidOk returns a tuple with the Zoneid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetZoneidOk() (*int32, bool) {
	if o == nil || IsNil(o.Zoneid) {
		return nil, false
	}
	return o.Zoneid, true
}

// HasZoneid returns a boolean if a field has been set.
func (o *Metadata) HasZoneid() bool {
	if o != nil && !IsNil(o.Zoneid) {
		return true
	}

	return false
}

// SetZoneid gets a reference to the given int32 and assigns it to the Zoneid field.
func (o *Metadata) SetZoneid(v int32) {
	o.Zoneid = &v
}

// GetSizeCap returns the SizeCap field value if set, zero value otherwise.
func (o *Metadata) GetSizeCap() int64 {
	if o == nil || IsNil(o.SizeCap) {
		var ret int64
		return ret
	}
	return *o.SizeCap
}

// GetSizeCapOk returns a tuple with the SizeCap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetSizeCapOk() (*int64, bool) {
	if o == nil || IsNil(o.SizeCap) {
		return nil, false
	}
	return o.SizeCap, true
}

// HasSizeCap returns a boolean if a field has been set.
func (o *Metadata) HasSizeCap() bool {
	if o != nil && !IsNil(o.SizeCap) {
		return true
	}

	return false
}

// SetSizeCap gets a reference to the given int64 and assigns it to the SizeCap field.
func (o *Metadata) SetSizeCap(v int64) {
	o.SizeCap = &v
}

// GetExpireAt returns the ExpireAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Metadata) GetExpireAt() time.Time {
	if o == nil || IsNil(o.ExpireAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ExpireAt.Get()
}

// GetExpireAtOk returns a tuple with the ExpireAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Metadata) GetExpireAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpireAt.Get(), o.ExpireAt.IsSet()
}

// HasExpireAt returns a boolean if a field has been set.
func (o *Metadata) HasExpireAt() bool {
	if o != nil && o.ExpireAt.IsSet() {
		return true
	}

	return false
}

// SetExpireAt gets a reference to the given NullableTime and assigns it to the ExpireAt field.
func (o *Metadata) SetExpireAt(v time.Time) {
	o.ExpireAt.Set(&v)
}
// SetExpireAtNil sets the value for ExpireAt to be an explicit nil
func (o *Metadata) SetExpireAtNil() {
	o.ExpireAt.Set(nil)
}

// UnsetExpireAt ensures that no value is present for ExpireAt, not even an explicit nil
func (o *Metadata) UnsetExpireAt() {
	o.ExpireAt.Unset()
}

// GetInstanceSet returns the InstanceSet field value if set, zero value otherwise.
func (o *Metadata) GetInstanceSet() []int32 {
	if o == nil || IsNil(o.InstanceSet) {
		var ret []int32
		return ret
	}
	return o.InstanceSet
}

// GetInstanceSetOk returns a tuple with the InstanceSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Metadata) GetInstanceSetOk() ([]int32, bool) {
	if o == nil || IsNil(o.InstanceSet) {
		return nil, false
	}
	return o.InstanceSet, true
}

// HasInstanceSet returns a boolean if a field has been set.
func (o *Metadata) HasInstanceSet() bool {
	if o != nil && !IsNil(o.InstanceSet) {
		return true
	}

	return false
}

// SetInstanceSet gets a reference to the given []int32 and assigns it to the InstanceSet field.
func (o *Metadata) SetInstanceSet(v []int32) {
	o.InstanceSet = v
}

func (o Metadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Dns) {
		toSerialize["dns"] = o.Dns
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if o.Parent.IsSet() {
		toSerialize["parent"] = o.Parent.Get()
	}
	if !IsNil(o.Zoneid) {
		toSerialize["zoneid"] = o.Zoneid
	}
	if !IsNil(o.SizeCap) {
		toSerialize["sizeCap"] = o.SizeCap
	}
	if o.ExpireAt.IsSet() {
		toSerialize["expireAt"] = o.ExpireAt.Get()
	}
	if !IsNil(o.InstanceSet) {
		toSerialize["instance_set"] = o.InstanceSet
	}
	return toSerialize, nil
}

type NullableMetadata struct {
	value *Metadata
	isSet bool
}

func (v NullableMetadata) Get() *Metadata {
	return v.value
}

func (v *NullableMetadata) Set(val *Metadata) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadata(val *Metadata) *NullableMetadata {
	return &NullableMetadata{value: val, isSet: true}
}

func (v NullableMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


