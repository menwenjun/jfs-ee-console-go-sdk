/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateVolumeQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateVolumeQuota{}

// CreateVolumeQuota struct for CreateVolumeQuota
type CreateVolumeQuota struct {
	// The directory to be set quota on
	Path string `json:"path"`
	// Total inodes, `0` or blank means no limit
	Inodes *int32 `json:"inodes,omitempty"`
	// Total size in bytes, `0` or blank means no limit
	Size *int32 `json:"size,omitempty"`
}

type _CreateVolumeQuota CreateVolumeQuota

// NewCreateVolumeQuota instantiates a new CreateVolumeQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateVolumeQuota(path string) *CreateVolumeQuota {
	this := CreateVolumeQuota{}
	this.Path = path
	return &this
}

// NewCreateVolumeQuotaWithDefaults instantiates a new CreateVolumeQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateVolumeQuotaWithDefaults() *CreateVolumeQuota {
	this := CreateVolumeQuota{}
	return &this
}

// GetPath returns the Path field value
func (o *CreateVolumeQuota) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *CreateVolumeQuota) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *CreateVolumeQuota) SetPath(v string) {
	o.Path = v
}

// GetInodes returns the Inodes field value if set, zero value otherwise.
func (o *CreateVolumeQuota) GetInodes() int32 {
	if o == nil || IsNil(o.Inodes) {
		var ret int32
		return ret
	}
	return *o.Inodes
}

// GetInodesOk returns a tuple with the Inodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumeQuota) GetInodesOk() (*int32, bool) {
	if o == nil || IsNil(o.Inodes) {
		return nil, false
	}
	return o.Inodes, true
}

// HasInodes returns a boolean if a field has been set.
func (o *CreateVolumeQuota) HasInodes() bool {
	if o != nil && !IsNil(o.Inodes) {
		return true
	}

	return false
}

// SetInodes gets a reference to the given int32 and assigns it to the Inodes field.
func (o *CreateVolumeQuota) SetInodes(v int32) {
	o.Inodes = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *CreateVolumeQuota) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateVolumeQuota) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *CreateVolumeQuota) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *CreateVolumeQuota) SetSize(v int32) {
	o.Size = &v
}

func (o CreateVolumeQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateVolumeQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["path"] = o.Path
	if !IsNil(o.Inodes) {
		toSerialize["inodes"] = o.Inodes
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	return toSerialize, nil
}

func (o *CreateVolumeQuota) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateVolumeQuota := _CreateVolumeQuota{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateVolumeQuota)

	if err != nil {
		return err
	}

	*o = CreateVolumeQuota(varCreateVolumeQuota)

	return err
}

type NullableCreateVolumeQuota struct {
	value *CreateVolumeQuota
	isSet bool
}

func (v NullableCreateVolumeQuota) Get() *CreateVolumeQuota {
	return v.value
}

func (v *NullableCreateVolumeQuota) Set(val *CreateVolumeQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateVolumeQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateVolumeQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateVolumeQuota(val *CreateVolumeQuota) *NullableCreateVolumeQuota {
	return &NullableCreateVolumeQuota{value: val, isSet: true}
}

func (v NullableCreateVolumeQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateVolumeQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


