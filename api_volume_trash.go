/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// VolumeTrashAPIService VolumeTrashAPI service
type VolumeTrashAPIService service

type ApiVolumesVolumeIDDeleteTrashPostRequest struct {
	ctx context.Context
	ApiService *VolumeTrashAPIService
	volumeID int32
	token *string
	inodes *Inodes
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDDeleteTrashPostRequest) Token(token string) ApiVolumesVolumeIDDeleteTrashPostRequest {
	r.token = &token
	return r
}

// List of file inodes to be deleted in trash
func (r ApiVolumesVolumeIDDeleteTrashPostRequest) Inodes(inodes Inodes) ApiVolumesVolumeIDDeleteTrashPostRequest {
	r.inodes = &inodes
	return r
}

func (r ApiVolumesVolumeIDDeleteTrashPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.VolumesVolumeIDDeleteTrashPostExecute(r)
}

/*
VolumesVolumeIDDeleteTrashPost Delete from trash

Delete files from trash permanently

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @return ApiVolumesVolumeIDDeleteTrashPostRequest
*/
func (a *VolumeTrashAPIService) VolumesVolumeIDDeleteTrashPost(ctx context.Context, volumeID int32) ApiVolumesVolumeIDDeleteTrashPostRequest {
	return ApiVolumesVolumeIDDeleteTrashPostRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
	}
}

// Execute executes the request
func (a *VolumeTrashAPIService) VolumesVolumeIDDeleteTrashPostExecute(r ApiVolumesVolumeIDDeleteTrashPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeTrashAPIService.VolumesVolumeIDDeleteTrashPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/deleteTrash"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return nil, reportError("volumeID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inodes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v VolumesVolumeIDListTrashGet400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVolumesVolumeIDEmptyTrashPostRequest struct {
	ctx context.Context
	ApiService *VolumeTrashAPIService
	volumeID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDEmptyTrashPostRequest) Token(token string) ApiVolumesVolumeIDEmptyTrashPostRequest {
	r.token = &token
	return r
}

func (r ApiVolumesVolumeIDEmptyTrashPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.VolumesVolumeIDEmptyTrashPostExecute(r)
}

/*
VolumesVolumeIDEmptyTrashPost Empty trash asynchronously

It may take some time to empty trash, depend on the number of files in trash

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @return ApiVolumesVolumeIDEmptyTrashPostRequest
*/
func (a *VolumeTrashAPIService) VolumesVolumeIDEmptyTrashPost(ctx context.Context, volumeID int32) ApiVolumesVolumeIDEmptyTrashPostRequest {
	return ApiVolumesVolumeIDEmptyTrashPostRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
	}
}

// Execute executes the request
func (a *VolumeTrashAPIService) VolumesVolumeIDEmptyTrashPostExecute(r ApiVolumesVolumeIDEmptyTrashPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeTrashAPIService.VolumesVolumeIDEmptyTrashPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/emptyTrash"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return nil, reportError("volumeID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v VolumesVolumeIDListTrashGet400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVolumesVolumeIDListTrashGetRequest struct {
	ctx context.Context
	ApiService *VolumeTrashAPIService
	volumeID int32
	token *string
	query *string
	page *int32
	n *int32
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDListTrashGetRequest) Token(token string) ApiVolumesVolumeIDListTrashGetRequest {
	r.token = &token
	return r
}

// keyword
func (r ApiVolumesVolumeIDListTrashGetRequest) Query(query string) ApiVolumesVolumeIDListTrashGetRequest {
	r.query = &query
	return r
}

// Page number, starting with &#x60;0&#x60;
func (r ApiVolumesVolumeIDListTrashGetRequest) Page(page int32) ApiVolumesVolumeIDListTrashGetRequest {
	r.page = &page
	return r
}

// Page size
func (r ApiVolumesVolumeIDListTrashGetRequest) N(n int32) ApiVolumesVolumeIDListTrashGetRequest {
	r.n = &n
	return r
}

func (r ApiVolumesVolumeIDListTrashGetRequest) Execute() (*VolumesVolumeIDListTrashGet200Response, *http.Response, error) {
	return r.ApiService.VolumesVolumeIDListTrashGetExecute(r)
}

/*
VolumesVolumeIDListTrashGet List trash files

List all the files in trash

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @return ApiVolumesVolumeIDListTrashGetRequest
*/
func (a *VolumeTrashAPIService) VolumesVolumeIDListTrashGet(ctx context.Context, volumeID int32) ApiVolumesVolumeIDListTrashGetRequest {
	return ApiVolumesVolumeIDListTrashGetRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
	}
}

// Execute executes the request
//  @return VolumesVolumeIDListTrashGet200Response
func (a *VolumeTrashAPIService) VolumesVolumeIDListTrashGetExecute(r ApiVolumesVolumeIDListTrashGetRequest) (*VolumesVolumeIDListTrashGet200Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *VolumesVolumeIDListTrashGet200Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeTrashAPIService.VolumesVolumeIDListTrashGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/listTrash"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return localVarReturnValue, nil, reportError("volumeID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	if r.query != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "query", r.query, "form", "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	}
	if r.n != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "n", r.n, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v VolumesVolumeIDListTrashGet400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVolumesVolumeIDRestoreFilePostRequest struct {
	ctx context.Context
	ApiService *VolumeTrashAPIService
	volumeID int32
	token *string
	inodes *Inodes
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDRestoreFilePostRequest) Token(token string) ApiVolumesVolumeIDRestoreFilePostRequest {
	r.token = &token
	return r
}

// List of file inodes to be deleted in trash
func (r ApiVolumesVolumeIDRestoreFilePostRequest) Inodes(inodes Inodes) ApiVolumesVolumeIDRestoreFilePostRequest {
	r.inodes = &inodes
	return r
}

func (r ApiVolumesVolumeIDRestoreFilePostRequest) Execute() (*http.Response, error) {
	return r.ApiService.VolumesVolumeIDRestoreFilePostExecute(r)
}

/*
VolumesVolumeIDRestoreFilePost Restore from trash

Restore files from trash to their original path

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @return ApiVolumesVolumeIDRestoreFilePostRequest
*/
func (a *VolumeTrashAPIService) VolumesVolumeIDRestoreFilePost(ctx context.Context, volumeID int32) ApiVolumesVolumeIDRestoreFilePostRequest {
	return ApiVolumesVolumeIDRestoreFilePostRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
	}
}

// Execute executes the request
func (a *VolumeTrashAPIService) VolumesVolumeIDRestoreFilePostExecute(r ApiVolumesVolumeIDRestoreFilePostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeTrashAPIService.VolumesVolumeIDRestoreFilePost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/restoreFile"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return nil, reportError("volumeID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inodes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v VolumesVolumeIDListTrashGet400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
