/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateMirrorVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMirrorVolume{}

// CreateMirrorVolume struct for CreateMirrorVolume
type CreateMirrorVolume struct {
	Name string `json:"name" validate:"regexp=^[a-z][0-9a-z-]{1,38}[0-9a-z]$"`
	Region int32 `json:"region"`
	// The bucket of the mirror volume. - If it is not provided or equal to the source volume's bucket, then the mirror volume and the source volume will share the same bucket. - Otherwise, the mirror volume's bucket will replicate the source volume's bucket. 
	Bucket *string `json:"bucket,omitempty"`
	// Days to keep deleted files, set to zero to disable. Files in trash remains billable, learn more at <a href=\"https://juicefs.com/docs/cloud/trash\" target=\"_blank\">our docs</a>.
	Trashtime *int32 `json:"trashtime,omitempty"`
	BlockSize *int32 `json:"blockSize,omitempty"`
	Compress *string `json:"compress,omitempty"`
	Compatible *bool `json:"compatible,omitempty"`
	Extend *string `json:"extend,omitempty"`
	Storage NullableString `json:"storage,omitempty"`
}

type _CreateMirrorVolume CreateMirrorVolume

// NewCreateMirrorVolume instantiates a new CreateMirrorVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMirrorVolume(name string, region int32) *CreateMirrorVolume {
	this := CreateMirrorVolume{}
	this.Name = name
	this.Region = region
	var bucket string = ""
	this.Bucket = &bucket
	var blockSize int32 = 4096
	this.BlockSize = &blockSize
	var compress string = "lz4"
	this.Compress = &compress
	var compatible bool = false
	this.Compatible = &compatible
	return &this
}

// NewCreateMirrorVolumeWithDefaults instantiates a new CreateMirrorVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMirrorVolumeWithDefaults() *CreateMirrorVolume {
	this := CreateMirrorVolume{}
	var bucket string = ""
	this.Bucket = &bucket
	var blockSize int32 = 4096
	this.BlockSize = &blockSize
	var compress string = "lz4"
	this.Compress = &compress
	var compatible bool = false
	this.Compatible = &compatible
	return &this
}

// GetName returns the Name field value
func (o *CreateMirrorVolume) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateMirrorVolume) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateMirrorVolume) SetName(v string) {
	o.Name = v
}

// GetRegion returns the Region field value
func (o *CreateMirrorVolume) GetRegion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *CreateMirrorVolume) GetRegionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *CreateMirrorVolume) SetRegion(v int32) {
	o.Region = v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *CreateMirrorVolume) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMirrorVolume) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *CreateMirrorVolume) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *CreateMirrorVolume) SetBucket(v string) {
	o.Bucket = &v
}

// GetTrashtime returns the Trashtime field value if set, zero value otherwise.
func (o *CreateMirrorVolume) GetTrashtime() int32 {
	if o == nil || IsNil(o.Trashtime) {
		var ret int32
		return ret
	}
	return *o.Trashtime
}

// GetTrashtimeOk returns a tuple with the Trashtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMirrorVolume) GetTrashtimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Trashtime) {
		return nil, false
	}
	return o.Trashtime, true
}

// HasTrashtime returns a boolean if a field has been set.
func (o *CreateMirrorVolume) HasTrashtime() bool {
	if o != nil && !IsNil(o.Trashtime) {
		return true
	}

	return false
}

// SetTrashtime gets a reference to the given int32 and assigns it to the Trashtime field.
func (o *CreateMirrorVolume) SetTrashtime(v int32) {
	o.Trashtime = &v
}

// GetBlockSize returns the BlockSize field value if set, zero value otherwise.
func (o *CreateMirrorVolume) GetBlockSize() int32 {
	if o == nil || IsNil(o.BlockSize) {
		var ret int32
		return ret
	}
	return *o.BlockSize
}

// GetBlockSizeOk returns a tuple with the BlockSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMirrorVolume) GetBlockSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BlockSize) {
		return nil, false
	}
	return o.BlockSize, true
}

// HasBlockSize returns a boolean if a field has been set.
func (o *CreateMirrorVolume) HasBlockSize() bool {
	if o != nil && !IsNil(o.BlockSize) {
		return true
	}

	return false
}

// SetBlockSize gets a reference to the given int32 and assigns it to the BlockSize field.
func (o *CreateMirrorVolume) SetBlockSize(v int32) {
	o.BlockSize = &v
}

// GetCompress returns the Compress field value if set, zero value otherwise.
func (o *CreateMirrorVolume) GetCompress() string {
	if o == nil || IsNil(o.Compress) {
		var ret string
		return ret
	}
	return *o.Compress
}

// GetCompressOk returns a tuple with the Compress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMirrorVolume) GetCompressOk() (*string, bool) {
	if o == nil || IsNil(o.Compress) {
		return nil, false
	}
	return o.Compress, true
}

// HasCompress returns a boolean if a field has been set.
func (o *CreateMirrorVolume) HasCompress() bool {
	if o != nil && !IsNil(o.Compress) {
		return true
	}

	return false
}

// SetCompress gets a reference to the given string and assigns it to the Compress field.
func (o *CreateMirrorVolume) SetCompress(v string) {
	o.Compress = &v
}

// GetCompatible returns the Compatible field value if set, zero value otherwise.
func (o *CreateMirrorVolume) GetCompatible() bool {
	if o == nil || IsNil(o.Compatible) {
		var ret bool
		return ret
	}
	return *o.Compatible
}

// GetCompatibleOk returns a tuple with the Compatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMirrorVolume) GetCompatibleOk() (*bool, bool) {
	if o == nil || IsNil(o.Compatible) {
		return nil, false
	}
	return o.Compatible, true
}

// HasCompatible returns a boolean if a field has been set.
func (o *CreateMirrorVolume) HasCompatible() bool {
	if o != nil && !IsNil(o.Compatible) {
		return true
	}

	return false
}

// SetCompatible gets a reference to the given bool and assigns it to the Compatible field.
func (o *CreateMirrorVolume) SetCompatible(v bool) {
	o.Compatible = &v
}

// GetExtend returns the Extend field value if set, zero value otherwise.
func (o *CreateMirrorVolume) GetExtend() string {
	if o == nil || IsNil(o.Extend) {
		var ret string
		return ret
	}
	return *o.Extend
}

// GetExtendOk returns a tuple with the Extend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMirrorVolume) GetExtendOk() (*string, bool) {
	if o == nil || IsNil(o.Extend) {
		return nil, false
	}
	return o.Extend, true
}

// HasExtend returns a boolean if a field has been set.
func (o *CreateMirrorVolume) HasExtend() bool {
	if o != nil && !IsNil(o.Extend) {
		return true
	}

	return false
}

// SetExtend gets a reference to the given string and assigns it to the Extend field.
func (o *CreateMirrorVolume) SetExtend(v string) {
	o.Extend = &v
}

// GetStorage returns the Storage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateMirrorVolume) GetStorage() string {
	if o == nil || IsNil(o.Storage.Get()) {
		var ret string
		return ret
	}
	return *o.Storage.Get()
}

// GetStorageOk returns a tuple with the Storage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateMirrorVolume) GetStorageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Storage.Get(), o.Storage.IsSet()
}

// HasStorage returns a boolean if a field has been set.
func (o *CreateMirrorVolume) HasStorage() bool {
	if o != nil && o.Storage.IsSet() {
		return true
	}

	return false
}

// SetStorage gets a reference to the given NullableString and assigns it to the Storage field.
func (o *CreateMirrorVolume) SetStorage(v string) {
	o.Storage.Set(&v)
}
// SetStorageNil sets the value for Storage to be an explicit nil
func (o *CreateMirrorVolume) SetStorageNil() {
	o.Storage.Set(nil)
}

// UnsetStorage ensures that no value is present for Storage, not even an explicit nil
func (o *CreateMirrorVolume) UnsetStorage() {
	o.Storage.Unset()
}

func (o CreateMirrorVolume) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMirrorVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["region"] = o.Region
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Trashtime) {
		toSerialize["trashtime"] = o.Trashtime
	}
	if !IsNil(o.BlockSize) {
		toSerialize["blockSize"] = o.BlockSize
	}
	if !IsNil(o.Compress) {
		toSerialize["compress"] = o.Compress
	}
	if !IsNil(o.Compatible) {
		toSerialize["compatible"] = o.Compatible
	}
	if !IsNil(o.Extend) {
		toSerialize["extend"] = o.Extend
	}
	if o.Storage.IsSet() {
		toSerialize["storage"] = o.Storage.Get()
	}
	return toSerialize, nil
}

func (o *CreateMirrorVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateMirrorVolume := _CreateMirrorVolume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateMirrorVolume)

	if err != nil {
		return err
	}

	*o = CreateMirrorVolume(varCreateMirrorVolume)

	return err
}

type NullableCreateMirrorVolume struct {
	value *CreateMirrorVolume
	isSet bool
}

func (v NullableCreateMirrorVolume) Get() *CreateMirrorVolume {
	return v.value
}

func (v *NullableCreateMirrorVolume) Set(val *CreateMirrorVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMirrorVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMirrorVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMirrorVolume(val *CreateMirrorVolume) *NullableCreateMirrorVolume {
	return &NullableCreateMirrorVolume{value: val, isSet: true}
}

func (v NullableCreateMirrorVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMirrorVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


