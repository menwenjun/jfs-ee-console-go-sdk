/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeRanger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeRanger{}

// VolumeRanger struct for VolumeRanger
type VolumeRanger struct {
	Enable bool `json:"enable"`
	AdminUrl string `json:"admin_url"`
	ServiceName string `json:"service_name"`
}

type _VolumeRanger VolumeRanger

// NewVolumeRanger instantiates a new VolumeRanger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeRanger(enable bool, adminUrl string, serviceName string) *VolumeRanger {
	this := VolumeRanger{}
	this.Enable = enable
	this.AdminUrl = adminUrl
	this.ServiceName = serviceName
	return &this
}

// NewVolumeRangerWithDefaults instantiates a new VolumeRanger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeRangerWithDefaults() *VolumeRanger {
	this := VolumeRanger{}
	return &this
}

// GetEnable returns the Enable field value
func (o *VolumeRanger) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *VolumeRanger) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *VolumeRanger) SetEnable(v bool) {
	o.Enable = v
}

// GetAdminUrl returns the AdminUrl field value
func (o *VolumeRanger) GetAdminUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AdminUrl
}

// GetAdminUrlOk returns a tuple with the AdminUrl field value
// and a boolean to check if the value has been set.
func (o *VolumeRanger) GetAdminUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AdminUrl, true
}

// SetAdminUrl sets field value
func (o *VolumeRanger) SetAdminUrl(v string) {
	o.AdminUrl = v
}

// GetServiceName returns the ServiceName field value
func (o *VolumeRanger) GetServiceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value
// and a boolean to check if the value has been set.
func (o *VolumeRanger) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceName, true
}

// SetServiceName sets field value
func (o *VolumeRanger) SetServiceName(v string) {
	o.ServiceName = v
}

func (o VolumeRanger) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeRanger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enable"] = o.Enable
	toSerialize["admin_url"] = o.AdminUrl
	toSerialize["service_name"] = o.ServiceName
	return toSerialize, nil
}

func (o *VolumeRanger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enable",
		"admin_url",
		"service_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeRanger := _VolumeRanger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeRanger)

	if err != nil {
		return err
	}

	*o = VolumeRanger(varVolumeRanger)

	return err
}

type NullableVolumeRanger struct {
	value *VolumeRanger
	isSet bool
}

func (v NullableVolumeRanger) Get() *VolumeRanger {
	return v.value
}

func (v *NullableVolumeRanger) Set(val *VolumeRanger) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeRanger) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeRanger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeRanger(val *VolumeRanger) *NullableVolumeRanger {
	return &NullableVolumeRanger{value: val, isSet: true}
}

func (v NullableVolumeRanger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeRanger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


