/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the MetadataInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataInstance{}

// MetadataInstance struct for MetadataInstance
type MetadataInstance struct {
	Id *int32 `json:"id,omitempty"`
	Meta *int32 `json:"meta,omitempty"`
	Node *int32 `json:"node,omitempty"`
	LogOnly *bool `json:"logOnly,omitempty"`
	Config *MetadataInstanceConfig `json:"config,omitempty"`
	Updated *time.Time `json:"updated,omitempty"`
}

// NewMetadataInstance instantiates a new MetadataInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataInstance() *MetadataInstance {
	this := MetadataInstance{}
	var logOnly bool = false
	this.LogOnly = &logOnly
	return &this
}

// NewMetadataInstanceWithDefaults instantiates a new MetadataInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataInstanceWithDefaults() *MetadataInstance {
	this := MetadataInstance{}
	var logOnly bool = false
	this.LogOnly = &logOnly
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MetadataInstance) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataInstance) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MetadataInstance) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MetadataInstance) SetId(v int32) {
	o.Id = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *MetadataInstance) GetMeta() int32 {
	if o == nil || IsNil(o.Meta) {
		var ret int32
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataInstance) GetMetaOk() (*int32, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *MetadataInstance) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given int32 and assigns it to the Meta field.
func (o *MetadataInstance) SetMeta(v int32) {
	o.Meta = &v
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *MetadataInstance) GetNode() int32 {
	if o == nil || IsNil(o.Node) {
		var ret int32
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataInstance) GetNodeOk() (*int32, bool) {
	if o == nil || IsNil(o.Node) {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *MetadataInstance) HasNode() bool {
	if o != nil && !IsNil(o.Node) {
		return true
	}

	return false
}

// SetNode gets a reference to the given int32 and assigns it to the Node field.
func (o *MetadataInstance) SetNode(v int32) {
	o.Node = &v
}

// GetLogOnly returns the LogOnly field value if set, zero value otherwise.
func (o *MetadataInstance) GetLogOnly() bool {
	if o == nil || IsNil(o.LogOnly) {
		var ret bool
		return ret
	}
	return *o.LogOnly
}

// GetLogOnlyOk returns a tuple with the LogOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataInstance) GetLogOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.LogOnly) {
		return nil, false
	}
	return o.LogOnly, true
}

// HasLogOnly returns a boolean if a field has been set.
func (o *MetadataInstance) HasLogOnly() bool {
	if o != nil && !IsNil(o.LogOnly) {
		return true
	}

	return false
}

// SetLogOnly gets a reference to the given bool and assigns it to the LogOnly field.
func (o *MetadataInstance) SetLogOnly(v bool) {
	o.LogOnly = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *MetadataInstance) GetConfig() MetadataInstanceConfig {
	if o == nil || IsNil(o.Config) {
		var ret MetadataInstanceConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataInstance) GetConfigOk() (*MetadataInstanceConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *MetadataInstance) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given MetadataInstanceConfig and assigns it to the Config field.
func (o *MetadataInstance) SetConfig(v MetadataInstanceConfig) {
	o.Config = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *MetadataInstance) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataInstance) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *MetadataInstance) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *MetadataInstance) SetUpdated(v time.Time) {
	o.Updated = &v
}

func (o MetadataInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Node) {
		toSerialize["node"] = o.Node
	}
	if !IsNil(o.LogOnly) {
		toSerialize["logOnly"] = o.LogOnly
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	return toSerialize, nil
}

type NullableMetadataInstance struct {
	value *MetadataInstance
	isSet bool
}

func (v NullableMetadataInstance) Get() *MetadataInstance {
	return v.value
}

func (v *NullableMetadataInstance) Set(val *MetadataInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataInstance(val *MetadataInstance) *NullableMetadataInstance {
	return &NullableMetadataInstance{value: val, isSet: true}
}

func (v NullableMetadataInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


