/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// VolumeQuotaAPIService VolumeQuotaAPI service
type VolumeQuotaAPIService service

type ApiVolumesVolumeIDQuotasGetRequest struct {
	ctx context.Context
	ApiService *VolumeQuotaAPIService
	volumeID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDQuotasGetRequest) Token(token string) ApiVolumesVolumeIDQuotasGetRequest {
	r.token = &token
	return r
}

func (r ApiVolumesVolumeIDQuotasGetRequest) Execute() ([]GettableVolumeQuota, *http.Response, error) {
	return r.ApiService.VolumesVolumeIDQuotasGetExecute(r)
}

/*
VolumesVolumeIDQuotasGet Get quota list

List all quotas of this volume

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @return ApiVolumesVolumeIDQuotasGetRequest
*/
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasGet(ctx context.Context, volumeID int32) ApiVolumesVolumeIDQuotasGetRequest {
	return ApiVolumesVolumeIDQuotasGetRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
	}
}

// Execute executes the request
//  @return []GettableVolumeQuota
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasGetExecute(r ApiVolumesVolumeIDQuotasGetRequest) ([]GettableVolumeQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GettableVolumeQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeQuotaAPIService.VolumesVolumeIDQuotasGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/quotas"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return localVarReturnValue, nil, reportError("volumeID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVolumesVolumeIDQuotasPostRequest struct {
	ctx context.Context
	ApiService *VolumeQuotaAPIService
	volumeID int32
	token *string
	createVolumeQuota *CreateVolumeQuota
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDQuotasPostRequest) Token(token string) ApiVolumesVolumeIDQuotasPostRequest {
	r.token = &token
	return r
}

func (r ApiVolumesVolumeIDQuotasPostRequest) CreateVolumeQuota(createVolumeQuota CreateVolumeQuota) ApiVolumesVolumeIDQuotasPostRequest {
	r.createVolumeQuota = &createVolumeQuota
	return r
}

func (r ApiVolumesVolumeIDQuotasPostRequest) Execute() ([]GettableVolumeQuota, *http.Response, error) {
	return r.ApiService.VolumesVolumeIDQuotasPostExecute(r)
}

/*
VolumesVolumeIDQuotasPost Set quota

Set quota for volume path

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @return ApiVolumesVolumeIDQuotasPostRequest
*/
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasPost(ctx context.Context, volumeID int32) ApiVolumesVolumeIDQuotasPostRequest {
	return ApiVolumesVolumeIDQuotasPostRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
	}
}

// Execute executes the request
//  @return []GettableVolumeQuota
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasPostExecute(r ApiVolumesVolumeIDQuotasPostRequest) ([]GettableVolumeQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []GettableVolumeQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeQuotaAPIService.VolumesVolumeIDQuotasPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/quotas"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return localVarReturnValue, nil, reportError("volumeID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createVolumeQuota
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVolumesVolumeIDQuotasVolumeQuotaIDDeleteRequest struct {
	ctx context.Context
	ApiService *VolumeQuotaAPIService
	volumeID int32
	volumeQuotaID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDQuotasVolumeQuotaIDDeleteRequest) Token(token string) ApiVolumesVolumeIDQuotasVolumeQuotaIDDeleteRequest {
	r.token = &token
	return r
}

func (r ApiVolumesVolumeIDQuotasVolumeQuotaIDDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.VolumesVolumeIDQuotasVolumeQuotaIDDeleteExecute(r)
}

/*
VolumesVolumeIDQuotasVolumeQuotaIDDelete Method for VolumesVolumeIDQuotasVolumeQuotaIDDelete

Delete quota by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @param volumeQuotaID ID of the JuiceFS volume quota
 @return ApiVolumesVolumeIDQuotasVolumeQuotaIDDeleteRequest
*/
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasVolumeQuotaIDDelete(ctx context.Context, volumeID int32, volumeQuotaID int32) ApiVolumesVolumeIDQuotasVolumeQuotaIDDeleteRequest {
	return ApiVolumesVolumeIDQuotasVolumeQuotaIDDeleteRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
		volumeQuotaID: volumeQuotaID,
	}
}

// Execute executes the request
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasVolumeQuotaIDDeleteExecute(r ApiVolumesVolumeIDQuotasVolumeQuotaIDDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeQuotaAPIService.VolumesVolumeIDQuotasVolumeQuotaIDDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/quotas/{volumeQuotaID}"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"volumeQuotaID"+"}", url.PathEscape(parameterValueToString(r.volumeQuotaID, "volumeQuotaID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return nil, reportError("volumeID must be greater than 1")
	}
	if r.volumeQuotaID < 1 {
		return nil, reportError("volumeQuotaID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiVolumesVolumeIDQuotasVolumeQuotaIDGetRequest struct {
	ctx context.Context
	ApiService *VolumeQuotaAPIService
	volumeID int32
	volumeQuotaID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDQuotasVolumeQuotaIDGetRequest) Token(token string) ApiVolumesVolumeIDQuotasVolumeQuotaIDGetRequest {
	r.token = &token
	return r
}

func (r ApiVolumesVolumeIDQuotasVolumeQuotaIDGetRequest) Execute() (*GettableVolumeQuota, *http.Response, error) {
	return r.ApiService.VolumesVolumeIDQuotasVolumeQuotaIDGetExecute(r)
}

/*
VolumesVolumeIDQuotasVolumeQuotaIDGet Method for VolumesVolumeIDQuotasVolumeQuotaIDGet

Get quota by ID

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @param volumeQuotaID ID of the JuiceFS volume quota
 @return ApiVolumesVolumeIDQuotasVolumeQuotaIDGetRequest
*/
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasVolumeQuotaIDGet(ctx context.Context, volumeID int32, volumeQuotaID int32) ApiVolumesVolumeIDQuotasVolumeQuotaIDGetRequest {
	return ApiVolumesVolumeIDQuotasVolumeQuotaIDGetRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
		volumeQuotaID: volumeQuotaID,
	}
}

// Execute executes the request
//  @return GettableVolumeQuota
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasVolumeQuotaIDGetExecute(r ApiVolumesVolumeIDQuotasVolumeQuotaIDGetRequest) (*GettableVolumeQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GettableVolumeQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeQuotaAPIService.VolumesVolumeIDQuotasVolumeQuotaIDGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/quotas/{volumeQuotaID}"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"volumeQuotaID"+"}", url.PathEscape(parameterValueToString(r.volumeQuotaID, "volumeQuotaID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return localVarReturnValue, nil, reportError("volumeID must be greater than 1")
	}
	if r.volumeQuotaID < 1 {
		return localVarReturnValue, nil, reportError("volumeQuotaID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest struct {
	ctx context.Context
	ApiService *VolumeQuotaAPIService
	volumeID int32
	volumeQuotaID int32
	token *string
	updateVolumeQuota *UpdateVolumeQuota
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest) Token(token string) ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest {
	r.token = &token
	return r
}

func (r ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest) UpdateVolumeQuota(updateVolumeQuota UpdateVolumeQuota) ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest {
	r.updateVolumeQuota = &updateVolumeQuota
	return r
}

func (r ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest) Execute() (*GettableVolumeQuota, *http.Response, error) {
	return r.ApiService.VolumesVolumeIDQuotasVolumeQuotaIDPutExecute(r)
}

/*
VolumesVolumeIDQuotasVolumeQuotaIDPut Update quota by ID

The `path` must remain the same

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param volumeID ID of the JuiceFS volume
 @param volumeQuotaID ID of the JuiceFS volume quota
 @return ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest
*/
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasVolumeQuotaIDPut(ctx context.Context, volumeID int32, volumeQuotaID int32) ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest {
	return ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest{
		ApiService: a,
		ctx: ctx,
		volumeID: volumeID,
		volumeQuotaID: volumeQuotaID,
	}
}

// Execute executes the request
//  @return GettableVolumeQuota
func (a *VolumeQuotaAPIService) VolumesVolumeIDQuotasVolumeQuotaIDPutExecute(r ApiVolumesVolumeIDQuotasVolumeQuotaIDPutRequest) (*GettableVolumeQuota, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GettableVolumeQuota
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "VolumeQuotaAPIService.VolumesVolumeIDQuotasVolumeQuotaIDPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/volumes/{volumeID}/quotas/{volumeQuotaID}"
	localVarPath = strings.Replace(localVarPath, "{"+"volumeID"+"}", url.PathEscape(parameterValueToString(r.volumeID, "volumeID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"volumeQuotaID"+"}", url.PathEscape(parameterValueToString(r.volumeQuotaID, "volumeQuotaID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.volumeID < 1 {
		return localVarReturnValue, nil, reportError("volumeID must be greater than 1")
	}
	if r.volumeQuotaID < 1 {
		return localVarReturnValue, nil, reportError("volumeQuotaID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateVolumeQuota
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v VolumesVolumeIDQuotasVolumeQuotaIDPut400Response
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
