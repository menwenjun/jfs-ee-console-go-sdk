/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FileInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileInfo{}

// FileInfo struct for FileInfo
type FileInfo struct {
	Name *string `json:"name,omitempty"`
	IsDir *bool `json:"is_dir,omitempty"`
	// - f: file - l: symlink - d: directory - q: fifo - b: block device - c: character device - s: socket - t: trash file 
	Type *string `json:"type,omitempty"`
	Length *int64 `json:"length,omitempty"`
	Nlink *int32 `json:"nlink,omitempty"`
	Mtime *int32 `json:"mtime,omitempty"`
}

// NewFileInfo instantiates a new FileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileInfo() *FileInfo {
	this := FileInfo{}
	return &this
}

// NewFileInfoWithDefaults instantiates a new FileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileInfoWithDefaults() *FileInfo {
	this := FileInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *FileInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *FileInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *FileInfo) SetName(v string) {
	o.Name = &v
}

// GetIsDir returns the IsDir field value if set, zero value otherwise.
func (o *FileInfo) GetIsDir() bool {
	if o == nil || IsNil(o.IsDir) {
		var ret bool
		return ret
	}
	return *o.IsDir
}

// GetIsDirOk returns a tuple with the IsDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetIsDirOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDir) {
		return nil, false
	}
	return o.IsDir, true
}

// HasIsDir returns a boolean if a field has been set.
func (o *FileInfo) HasIsDir() bool {
	if o != nil && !IsNil(o.IsDir) {
		return true
	}

	return false
}

// SetIsDir gets a reference to the given bool and assigns it to the IsDir field.
func (o *FileInfo) SetIsDir(v bool) {
	o.IsDir = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FileInfo) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FileInfo) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FileInfo) SetType(v string) {
	o.Type = &v
}

// GetLength returns the Length field value if set, zero value otherwise.
func (o *FileInfo) GetLength() int64 {
	if o == nil || IsNil(o.Length) {
		var ret int64
		return ret
	}
	return *o.Length
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetLengthOk() (*int64, bool) {
	if o == nil || IsNil(o.Length) {
		return nil, false
	}
	return o.Length, true
}

// HasLength returns a boolean if a field has been set.
func (o *FileInfo) HasLength() bool {
	if o != nil && !IsNil(o.Length) {
		return true
	}

	return false
}

// SetLength gets a reference to the given int64 and assigns it to the Length field.
func (o *FileInfo) SetLength(v int64) {
	o.Length = &v
}

// GetNlink returns the Nlink field value if set, zero value otherwise.
func (o *FileInfo) GetNlink() int32 {
	if o == nil || IsNil(o.Nlink) {
		var ret int32
		return ret
	}
	return *o.Nlink
}

// GetNlinkOk returns a tuple with the Nlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetNlinkOk() (*int32, bool) {
	if o == nil || IsNil(o.Nlink) {
		return nil, false
	}
	return o.Nlink, true
}

// HasNlink returns a boolean if a field has been set.
func (o *FileInfo) HasNlink() bool {
	if o != nil && !IsNil(o.Nlink) {
		return true
	}

	return false
}

// SetNlink gets a reference to the given int32 and assigns it to the Nlink field.
func (o *FileInfo) SetNlink(v int32) {
	o.Nlink = &v
}

// GetMtime returns the Mtime field value if set, zero value otherwise.
func (o *FileInfo) GetMtime() int32 {
	if o == nil || IsNil(o.Mtime) {
		var ret int32
		return ret
	}
	return *o.Mtime
}

// GetMtimeOk returns a tuple with the Mtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileInfo) GetMtimeOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtime) {
		return nil, false
	}
	return o.Mtime, true
}

// HasMtime returns a boolean if a field has been set.
func (o *FileInfo) HasMtime() bool {
	if o != nil && !IsNil(o.Mtime) {
		return true
	}

	return false
}

// SetMtime gets a reference to the given int32 and assigns it to the Mtime field.
func (o *FileInfo) SetMtime(v int32) {
	o.Mtime = &v
}

func (o FileInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.IsDir) {
		toSerialize["is_dir"] = o.IsDir
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Length) {
		toSerialize["length"] = o.Length
	}
	if !IsNil(o.Nlink) {
		toSerialize["nlink"] = o.Nlink
	}
	if !IsNil(o.Mtime) {
		toSerialize["mtime"] = o.Mtime
	}
	return toSerialize, nil
}

type NullableFileInfo struct {
	value *FileInfo
	isSet bool
}

func (v NullableFileInfo) Get() *FileInfo {
	return v.value
}

func (v *NullableFileInfo) Set(val *FileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileInfo(val *FileInfo) *NullableFileInfo {
	return &NullableFileInfo{value: val, isSet: true}
}

func (v NullableFileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


