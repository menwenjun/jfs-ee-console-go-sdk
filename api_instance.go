/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// InstanceAPIService InstanceAPI service
type InstanceAPIService service

type ApiMetadatasMetadataIDInstancesGetRequest struct {
	ctx context.Context
	ApiService *InstanceAPIService
	metadataID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiMetadatasMetadataIDInstancesGetRequest) Token(token string) ApiMetadatasMetadataIDInstancesGetRequest {
	r.token = &token
	return r
}

func (r ApiMetadatasMetadataIDInstancesGetRequest) Execute() ([]MetadataInstance, *http.Response, error) {
	return r.ApiService.MetadatasMetadataIDInstancesGetExecute(r)
}

/*
MetadatasMetadataIDInstancesGet Get instance list

Return instance list for this metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param metadataID ID of the metadata
 @return ApiMetadatasMetadataIDInstancesGetRequest
*/
func (a *InstanceAPIService) MetadatasMetadataIDInstancesGet(ctx context.Context, metadataID int32) ApiMetadatasMetadataIDInstancesGetRequest {
	return ApiMetadatasMetadataIDInstancesGetRequest{
		ApiService: a,
		ctx: ctx,
		metadataID: metadataID,
	}
}

// Execute executes the request
//  @return []MetadataInstance
func (a *InstanceAPIService) MetadatasMetadataIDInstancesGetExecute(r ApiMetadatasMetadataIDInstancesGetRequest) ([]MetadataInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []MetadataInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceAPIService.MetadatasMetadataIDInstancesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metadatas/{metadataID}/instances"
	localVarPath = strings.Replace(localVarPath, "{"+"metadataID"+"}", url.PathEscape(parameterValueToString(r.metadataID, "metadataID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metadataID < 1 {
		return localVarReturnValue, nil, reportError("metadataID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadatasMetadataIDInstancesInstanceIDGetRequest struct {
	ctx context.Context
	ApiService *InstanceAPIService
	metadataID int32
	instanceID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiMetadatasMetadataIDInstancesInstanceIDGetRequest) Token(token string) ApiMetadatasMetadataIDInstancesInstanceIDGetRequest {
	r.token = &token
	return r
}

func (r ApiMetadatasMetadataIDInstancesInstanceIDGetRequest) Execute() (*MetadataInstance, *http.Response, error) {
	return r.ApiService.MetadatasMetadataIDInstancesInstanceIDGetExecute(r)
}

/*
MetadatasMetadataIDInstancesInstanceIDGet Get instance by ID

Return instance list for this metadata

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param metadataID ID of the metadata
 @param instanceID ID of the JuiceFS metadata instance
 @return ApiMetadatasMetadataIDInstancesInstanceIDGetRequest
*/
func (a *InstanceAPIService) MetadatasMetadataIDInstancesInstanceIDGet(ctx context.Context, metadataID int32, instanceID int32) ApiMetadatasMetadataIDInstancesInstanceIDGetRequest {
	return ApiMetadatasMetadataIDInstancesInstanceIDGetRequest{
		ApiService: a,
		ctx: ctx,
		metadataID: metadataID,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return MetadataInstance
func (a *InstanceAPIService) MetadatasMetadataIDInstancesInstanceIDGetExecute(r ApiMetadatasMetadataIDInstancesInstanceIDGetRequest) (*MetadataInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceAPIService.MetadatasMetadataIDInstancesInstanceIDGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metadatas/{metadataID}/instances/{instanceID}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadataID"+"}", url.PathEscape(parameterValueToString(r.metadataID, "metadataID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metadataID < 1 {
		return localVarReturnValue, nil, reportError("metadataID must be greater than 1")
	}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest struct {
	ctx context.Context
	ApiService *InstanceAPIService
	metadataID int32
	instanceID int32
	token *string
	metadataInstance *MetadataInstance
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest) Token(token string) ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest {
	r.token = &token
	return r
}

func (r ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest) MetadataInstance(metadataInstance MetadataInstance) ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest {
	r.metadataInstance = &metadataInstance
	return r
}

func (r ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest) Execute() (*MetadataInstance, *http.Response, error) {
	return r.ApiService.MetadatasMetadataIDInstancesInstanceIDPatchExecute(r)
}

/*
MetadatasMetadataIDInstancesInstanceIDPatch Update instance properties

Update instance properties

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param metadataID ID of the metadata
 @param instanceID ID of the JuiceFS metadata instance
 @return ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest
*/
func (a *InstanceAPIService) MetadatasMetadataIDInstancesInstanceIDPatch(ctx context.Context, metadataID int32, instanceID int32) ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest {
	return ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest{
		ApiService: a,
		ctx: ctx,
		metadataID: metadataID,
		instanceID: instanceID,
	}
}

// Execute executes the request
//  @return MetadataInstance
func (a *InstanceAPIService) MetadatasMetadataIDInstancesInstanceIDPatchExecute(r ApiMetadatasMetadataIDInstancesInstanceIDPatchRequest) (*MetadataInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *MetadataInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceAPIService.MetadatasMetadataIDInstancesInstanceIDPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/metadatas/{metadataID}/instances/{instanceID}"
	localVarPath = strings.Replace(localVarPath, "{"+"metadataID"+"}", url.PathEscape(parameterValueToString(r.metadataID, "metadataID")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"instanceID"+"}", url.PathEscape(parameterValueToString(r.instanceID, "instanceID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.metadataID < 1 {
		return localVarReturnValue, nil, reportError("metadataID must be greater than 1")
	}
	if r.instanceID < 1 {
		return localVarReturnValue, nil, reportError("instanceID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.metadataInstance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
