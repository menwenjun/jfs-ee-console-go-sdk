/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// RegionAPIService RegionAPI service
type RegionAPIService service

type ApiRegionsGetRequest struct {
	ctx context.Context
	ApiService *RegionAPIService
}

func (r ApiRegionsGetRequest) Execute() ([]Region, *http.Response, error) {
	return r.ApiService.RegionsGetExecute(r)
}

/*
RegionsGet Get region list

Get region list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiRegionsGetRequest
*/
func (a *RegionAPIService) RegionsGet(ctx context.Context) ApiRegionsGetRequest {
	return ApiRegionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Region
func (a *RegionAPIService) RegionsGetExecute(r ApiRegionsGetRequest) ([]Region, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegionAPIService.RegionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/regions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegionsRegionIDGetRequest struct {
	ctx context.Context
	ApiService *RegionAPIService
	regionID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiRegionsRegionIDGetRequest) Token(token string) ApiRegionsRegionIDGetRequest {
	r.token = &token
	return r
}

func (r ApiRegionsRegionIDGetRequest) Execute() (*Region, *http.Response, error) {
	return r.ApiService.RegionsRegionIDGetExecute(r)
}

/*
RegionsRegionIDGet Get region by ID

Return details of the region specified by {regionID}

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param regionID ID of the region
 @return ApiRegionsRegionIDGetRequest
*/
func (a *RegionAPIService) RegionsRegionIDGet(ctx context.Context, regionID int32) ApiRegionsRegionIDGetRequest {
	return ApiRegionsRegionIDGetRequest{
		ApiService: a,
		ctx: ctx,
		regionID: regionID,
	}
}

// Execute executes the request
//  @return Region
func (a *RegionAPIService) RegionsRegionIDGetExecute(r ApiRegionsRegionIDGetRequest) (*Region, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Region
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegionAPIService.RegionsRegionIDGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/regions/{regionID}"
	localVarPath = strings.Replace(localVarPath, "{"+"regionID"+"}", url.PathEscape(parameterValueToString(r.regionID, "regionID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.regionID < 1 {
		return localVarReturnValue, nil, reportError("regionID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegionsRegionIDMetricsGetRequest struct {
	ctx context.Context
	ApiService *RegionAPIService
	regionID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiRegionsRegionIDMetricsGetRequest) Token(token string) ApiRegionsRegionIDMetricsGetRequest {
	r.token = &token
	return r
}

func (r ApiRegionsRegionIDMetricsGetRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.RegionsRegionIDMetricsGetExecute(r)
}

/*
RegionsRegionIDMetricsGet Get region metrics

Return prometheus format region metrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param regionID ID of the region
 @return ApiRegionsRegionIDMetricsGetRequest
*/
func (a *RegionAPIService) RegionsRegionIDMetricsGet(ctx context.Context, regionID int32) ApiRegionsRegionIDMetricsGetRequest {
	return ApiRegionsRegionIDMetricsGetRequest{
		ApiService: a,
		ctx: ctx,
		regionID: regionID,
	}
}

// Execute executes the request
//  @return string
func (a *RegionAPIService) RegionsRegionIDMetricsGetExecute(r ApiRegionsRegionIDMetricsGetRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegionAPIService.RegionsRegionIDMetricsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/regions/{regionID}/metrics"
	localVarPath = strings.Replace(localVarPath, "{"+"regionID"+"}", url.PathEscape(parameterValueToString(r.regionID, "regionID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.regionID < 1 {
		return localVarReturnValue, nil, reportError("regionID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegionsRegionIDTrashtimeGetRequest struct {
	ctx context.Context
	ApiService *RegionAPIService
	regionID int32
	token *string
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiRegionsRegionIDTrashtimeGetRequest) Token(token string) ApiRegionsRegionIDTrashtimeGetRequest {
	r.token = &token
	return r
}

func (r ApiRegionsRegionIDTrashtimeGetRequest) Execute() (*TrashTime, *http.Response, error) {
	return r.ApiService.RegionsRegionIDTrashtimeGetExecute(r)
}

/*
RegionsRegionIDTrashtimeGet Method for RegionsRegionIDTrashtimeGet

Get region trashtime(days)

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param regionID ID of the region
 @return ApiRegionsRegionIDTrashtimeGetRequest
*/
func (a *RegionAPIService) RegionsRegionIDTrashtimeGet(ctx context.Context, regionID int32) ApiRegionsRegionIDTrashtimeGetRequest {
	return ApiRegionsRegionIDTrashtimeGetRequest{
		ApiService: a,
		ctx: ctx,
		regionID: regionID,
	}
}

// Execute executes the request
//  @return TrashTime
func (a *RegionAPIService) RegionsRegionIDTrashtimeGetExecute(r ApiRegionsRegionIDTrashtimeGetRequest) (*TrashTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TrashTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegionAPIService.RegionsRegionIDTrashtimeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/regions/{regionID}/trashtime"
	localVarPath = strings.Replace(localVarPath, "{"+"regionID"+"}", url.PathEscape(parameterValueToString(r.regionID, "regionID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.regionID < 1 {
		return localVarReturnValue, nil, reportError("regionID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRegionsRegionIDTrashtimePutRequest struct {
	ctx context.Context
	ApiService *RegionAPIService
	regionID int32
	token *string
	trashTime *TrashTime
}

// Token of the region, it&#39;s once used for authentication, now deprecated. please use access key/secret key instead.
// Deprecated
func (r ApiRegionsRegionIDTrashtimePutRequest) Token(token string) ApiRegionsRegionIDTrashtimePutRequest {
	r.token = &token
	return r
}

func (r ApiRegionsRegionIDTrashtimePutRequest) TrashTime(trashTime TrashTime) ApiRegionsRegionIDTrashtimePutRequest {
	r.trashTime = &trashTime
	return r
}

func (r ApiRegionsRegionIDTrashtimePutRequest) Execute() (*TrashTime, *http.Response, error) {
	return r.ApiService.RegionsRegionIDTrashtimePutExecute(r)
}

/*
RegionsRegionIDTrashtimePut Set region trashtime(days)

Update trashtime(days) for the region

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param regionID ID of the region
 @return ApiRegionsRegionIDTrashtimePutRequest
*/
func (a *RegionAPIService) RegionsRegionIDTrashtimePut(ctx context.Context, regionID int32) ApiRegionsRegionIDTrashtimePutRequest {
	return ApiRegionsRegionIDTrashtimePutRequest{
		ApiService: a,
		ctx: ctx,
		regionID: regionID,
	}
}

// Execute executes the request
//  @return TrashTime
func (a *RegionAPIService) RegionsRegionIDTrashtimePutExecute(r ApiRegionsRegionIDTrashtimePutRequest) (*TrashTime, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TrashTime
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RegionAPIService.RegionsRegionIDTrashtimePut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/regions/{regionID}/trashtime"
	localVarPath = strings.Replace(localVarPath, "{"+"regionID"+"}", url.PathEscape(parameterValueToString(r.regionID, "regionID")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.regionID < 1 {
		return localVarReturnValue, nil, reportError("regionID must be greater than 1")
	}

	if r.token != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "token", r.token, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.trashTime
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
