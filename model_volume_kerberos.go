/*
JuiceFS console API

API of the JuiceFS console (https://juicefs.com/api/v1)

API version: 0.0.1
Contact: team@juicedata.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VolumeKerberos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeKerberos{}

// VolumeKerberos struct for VolumeKerberos
type VolumeKerberos struct {
	Enable bool `json:"enable"`
	Keytab *string `json:"keytab,omitempty"`
	Superuser *string `json:"superuser,omitempty"`
	Supergroup *string `json:"supergroup,omitempty"`
	Proxies []VolumeKerberosProxy `json:"proxies,omitempty"`
}

type _VolumeKerberos VolumeKerberos

// NewVolumeKerberos instantiates a new VolumeKerberos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeKerberos(enable bool) *VolumeKerberos {
	this := VolumeKerberos{}
	this.Enable = enable
	var keytab string = ""
	this.Keytab = &keytab
	var superuser string = ""
	this.Superuser = &superuser
	var supergroup string = ""
	this.Supergroup = &supergroup
	return &this
}

// NewVolumeKerberosWithDefaults instantiates a new VolumeKerberos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeKerberosWithDefaults() *VolumeKerberos {
	this := VolumeKerberos{}
	var keytab string = ""
	this.Keytab = &keytab
	var superuser string = ""
	this.Superuser = &superuser
	var supergroup string = ""
	this.Supergroup = &supergroup
	return &this
}

// GetEnable returns the Enable field value
func (o *VolumeKerberos) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *VolumeKerberos) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *VolumeKerberos) SetEnable(v bool) {
	o.Enable = v
}

// GetKeytab returns the Keytab field value if set, zero value otherwise.
func (o *VolumeKerberos) GetKeytab() string {
	if o == nil || IsNil(o.Keytab) {
		var ret string
		return ret
	}
	return *o.Keytab
}

// GetKeytabOk returns a tuple with the Keytab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeKerberos) GetKeytabOk() (*string, bool) {
	if o == nil || IsNil(o.Keytab) {
		return nil, false
	}
	return o.Keytab, true
}

// HasKeytab returns a boolean if a field has been set.
func (o *VolumeKerberos) HasKeytab() bool {
	if o != nil && !IsNil(o.Keytab) {
		return true
	}

	return false
}

// SetKeytab gets a reference to the given string and assigns it to the Keytab field.
func (o *VolumeKerberos) SetKeytab(v string) {
	o.Keytab = &v
}

// GetSuperuser returns the Superuser field value if set, zero value otherwise.
func (o *VolumeKerberos) GetSuperuser() string {
	if o == nil || IsNil(o.Superuser) {
		var ret string
		return ret
	}
	return *o.Superuser
}

// GetSuperuserOk returns a tuple with the Superuser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeKerberos) GetSuperuserOk() (*string, bool) {
	if o == nil || IsNil(o.Superuser) {
		return nil, false
	}
	return o.Superuser, true
}

// HasSuperuser returns a boolean if a field has been set.
func (o *VolumeKerberos) HasSuperuser() bool {
	if o != nil && !IsNil(o.Superuser) {
		return true
	}

	return false
}

// SetSuperuser gets a reference to the given string and assigns it to the Superuser field.
func (o *VolumeKerberos) SetSuperuser(v string) {
	o.Superuser = &v
}

// GetSupergroup returns the Supergroup field value if set, zero value otherwise.
func (o *VolumeKerberos) GetSupergroup() string {
	if o == nil || IsNil(o.Supergroup) {
		var ret string
		return ret
	}
	return *o.Supergroup
}

// GetSupergroupOk returns a tuple with the Supergroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeKerberos) GetSupergroupOk() (*string, bool) {
	if o == nil || IsNil(o.Supergroup) {
		return nil, false
	}
	return o.Supergroup, true
}

// HasSupergroup returns a boolean if a field has been set.
func (o *VolumeKerberos) HasSupergroup() bool {
	if o != nil && !IsNil(o.Supergroup) {
		return true
	}

	return false
}

// SetSupergroup gets a reference to the given string and assigns it to the Supergroup field.
func (o *VolumeKerberos) SetSupergroup(v string) {
	o.Supergroup = &v
}

// GetProxies returns the Proxies field value if set, zero value otherwise.
func (o *VolumeKerberos) GetProxies() []VolumeKerberosProxy {
	if o == nil || IsNil(o.Proxies) {
		var ret []VolumeKerberosProxy
		return ret
	}
	return o.Proxies
}

// GetProxiesOk returns a tuple with the Proxies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeKerberos) GetProxiesOk() ([]VolumeKerberosProxy, bool) {
	if o == nil || IsNil(o.Proxies) {
		return nil, false
	}
	return o.Proxies, true
}

// HasProxies returns a boolean if a field has been set.
func (o *VolumeKerberos) HasProxies() bool {
	if o != nil && !IsNil(o.Proxies) {
		return true
	}

	return false
}

// SetProxies gets a reference to the given []VolumeKerberosProxy and assigns it to the Proxies field.
func (o *VolumeKerberos) SetProxies(v []VolumeKerberosProxy) {
	o.Proxies = v
}

func (o VolumeKerberos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeKerberos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enable"] = o.Enable
	if !IsNil(o.Keytab) {
		toSerialize["keytab"] = o.Keytab
	}
	if !IsNil(o.Superuser) {
		toSerialize["superuser"] = o.Superuser
	}
	if !IsNil(o.Supergroup) {
		toSerialize["supergroup"] = o.Supergroup
	}
	if !IsNil(o.Proxies) {
		toSerialize["proxies"] = o.Proxies
	}
	return toSerialize, nil
}

func (o *VolumeKerberos) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVolumeKerberos := _VolumeKerberos{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVolumeKerberos)

	if err != nil {
		return err
	}

	*o = VolumeKerberos(varVolumeKerberos)

	return err
}

type NullableVolumeKerberos struct {
	value *VolumeKerberos
	isSet bool
}

func (v NullableVolumeKerberos) Get() *VolumeKerberos {
	return v.value
}

func (v *NullableVolumeKerberos) Set(val *VolumeKerberos) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeKerberos) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeKerberos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeKerberos(val *VolumeKerberos) *NullableVolumeKerberos {
	return &NullableVolumeKerberos{value: val, isSet: true}
}

func (v NullableVolumeKerberos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeKerberos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


